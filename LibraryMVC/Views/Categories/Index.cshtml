@model IEnumerable<LibraryMVC.Models.Category>

@{
    ViewBag.Title = "Index";
}

<h2>Categories List</h2>

<button type="button" onclick="location.href='@Url.Action("Create")'" class="btn btn-success my-3">Create New</button>

<table class="table border">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.StatusText)
                </td>*@
            <td>
                <div class="toggle-switch">
                    <input class="toggle-input" id="toggle-@item.CategoryId" type="checkbox" @(item.Status == 1 ? "checked" : "") onclick="confirmToggleStatus(@item.CategoryId)">
                    <label class="toggle-label" for="toggle-@item.CategoryId"></label>
                </div>
            </td>
            <td>
                <button type="button" onclick="location.href='@Url.Action("Edit", new { id=item.CategoryId })'" class="btn btn-primary">Edit</button>
                @*<button type="button" onclick="location.href='@Url.Action("Details", new { id=item.CategoryId})'" class="btn btn-info">Details</button>*@
                <button type="button" onclick="location.href='@Url.Action("Delete", new { id=item.CategoryId })'" class="btn btn-danger">Delete</button>
            </td>
        </tr>
    }

</table>

@section Scripts {
    <script type="text/javascript">
        function confirmToggleStatus(categoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to change the status of this category?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, change it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleStatus(categoryId);
                } else {
                    // Revert the checkbox to its original state
                    var checkbox = $('#toggle-' + categoryId);
                    checkbox.prop('checked', !checkbox.prop('checked'));
                }
            });
        }

        function toggleStatus(categoryId) {
            $.ajax({
                url: '@Url.Action("ToggleStatus", "Categories")',
                type: 'POST',
                data: { id: categoryId },
                success: function (response) {
                    if (response.success) {
                        Swal.fire(
                            'Updated!',
                            'The status has been updated.',
                            'success'
                        );
                    } else {
                        Swal.fire(
                            'Error!',
                            'There was an error updating the status.',
                            'error'
                        );
                        // Revert the checkbox to its original state
                        var checkbox = $('#toggle-' + categoryId);
                        checkbox.prop('checked', !checkbox.prop('checked'));
                    }
                },
                error: function () {
                    Swal.fire(
                        'Error!',
                        'There was an error updating the status.',
                        'error'
                    );
                    // Revert the checkbox to its original state
                    var checkbox = $('#toggle-' + categoryId);
                    checkbox.prop('checked', !checkbox.prop('checked'));
                }
            });
        }
    </script>
}
